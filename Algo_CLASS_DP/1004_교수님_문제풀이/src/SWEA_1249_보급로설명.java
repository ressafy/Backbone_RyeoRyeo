import java.io.BufferedReader;
import java.io.InputStreamReader;

public class SWEA_1249_보급로설명 {
	/**
	 * 그래프 최단 경로 문제이다. 
	 * 가중치가 있다..... 
	 * 2차원적인 배열의 입력을 주면서 각각의 자리에는 파여진 깊이 정보를 주었다.
	 * 2차원 cell(칸) 이 정점이고 간선은 현재 정점에서 인접해 있는 다른 정점으로의 연결관계
	 * 이 문제는 한 정점 당 최대 간선이 4개인 그래프이다. 
	 * 정점의 개수는 최대 100 x 100 -> 10000
	 * 간선의 가중치는 파손된 깊이가 된다.
	 * 그래서 가중치가 있는 그래프의 최단경로 
	 * 
	 * 
	 * 없는 경우는 아묻따 -> BFS !!!! 유리한 장점!!
	 * BFS 는 가능한 모든 애들을 다 데리고서 목적지로 간다. 
	 * 있는 경우도 BFS가능은 하다. 하지만 그러면 안된다.
	 * 
	 * 
	 * 여기서 하는 방문체크는 t/f 형태가 아니라 가중치를 가지고 체크를 해야 한다.
	 * -> 너비가 짧은 것 뿐 비용이 더 적은 것은 아니다!!
	 * 출발지에서 해당 정점까지 최소 비용을 기록을 해두고 비교해서 더 적은 비용인 애를 고른다.
	 * 도착지에 도착했다고 해서 끝내면 안된다. 그 뒤에 오는 녀석이 더 저렴한 비용으로 올 수 있다.
	 * 
	 * 
	 * BFS 에다가 Priority Queue 써보는건 어떨까....?
	 * 
	 * 다익스트라 (PQ 버전과 안쓴거 버전)
	 * 하여간 이런 적은 비용을 기준으로 잡으면서 풀어가는 것은 다익스트라이다...
	 * 그렇다면 음의 가중치이냐 양의 가중치이냐를 봐야 하는데 여기는 양의 가중치만 가능하다.
	 * 그렇다면 다익스트라 그리디로 풀 수 있다.
	 * 
	 * 입력 값이 오는 것을 잘 보자.
	 * 띄어쓰기로 오지 않고 따닥 붙여 온다는 것은 0~9 까지라는 것을 유추할 수 있다.
	 * 아무리 해도 그럼 이 문제는 90000까지니까 int 형으로 하면 된다.
	 * 
	 * 
	 * 희소 그래프 밀집 그래프? 이건 희소 그래프이다. 간선이 상대적으로 굉장히 적은 그래프이기에. 
	 * 희소에서 다익스트라에서는 PQ를 쓰는 것이 유리하다고 한다.
	 * 
	 * **/
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
	}

}
